/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package fleet_mgmt;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class fleet_mgmt_sensors extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4639197844190934424L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"fleet_mgmt_sensors\",\"namespace\":\"fleet_mgmt\",\"fields\":[{\"name\":\"vehicle_id\",\"type\":\"int\"},{\"name\":\"engine_temperature\",\"type\":\"int\"},{\"name\":\"average_rpm\",\"type\":\"int\"}],\"connect.name\":\"fleet_mgmt.fleet_mgmt_sensors\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<fleet_mgmt_sensors> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<fleet_mgmt_sensors> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<fleet_mgmt_sensors> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<fleet_mgmt_sensors> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<fleet_mgmt_sensors> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this fleet_mgmt_sensors to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a fleet_mgmt_sensors from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a fleet_mgmt_sensors instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static fleet_mgmt_sensors fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int vehicle_id;
  private int engine_temperature;
  private int average_rpm;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public fleet_mgmt_sensors() {}

  /**
   * All-args constructor.
   * @param vehicle_id The new value for vehicle_id
   * @param engine_temperature The new value for engine_temperature
   * @param average_rpm The new value for average_rpm
   */
  public fleet_mgmt_sensors(java.lang.Integer vehicle_id, java.lang.Integer engine_temperature, java.lang.Integer average_rpm) {
    this.vehicle_id = vehicle_id;
    this.engine_temperature = engine_temperature;
    this.average_rpm = average_rpm;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return vehicle_id;
    case 1: return engine_temperature;
    case 2: return average_rpm;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: vehicle_id = (java.lang.Integer)value$; break;
    case 1: engine_temperature = (java.lang.Integer)value$; break;
    case 2: average_rpm = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'vehicle_id' field.
   * @return The value of the 'vehicle_id' field.
   */
  public int getVehicleId() {
    return vehicle_id;
  }


  /**
   * Sets the value of the 'vehicle_id' field.
   * @param value the value to set.
   */
  public void setVehicleId(int value) {
    this.vehicle_id = value;
  }

  /**
   * Gets the value of the 'engine_temperature' field.
   * @return The value of the 'engine_temperature' field.
   */
  public int getEngineTemperature() {
    return engine_temperature;
  }


  /**
   * Sets the value of the 'engine_temperature' field.
   * @param value the value to set.
   */
  public void setEngineTemperature(int value) {
    this.engine_temperature = value;
  }

  /**
   * Gets the value of the 'average_rpm' field.
   * @return The value of the 'average_rpm' field.
   */
  public int getAverageRpm() {
    return average_rpm;
  }


  /**
   * Sets the value of the 'average_rpm' field.
   * @param value the value to set.
   */
  public void setAverageRpm(int value) {
    this.average_rpm = value;
  }

  /**
   * Creates a new fleet_mgmt_sensors RecordBuilder.
   * @return A new fleet_mgmt_sensors RecordBuilder
   */
  public static fleet_mgmt.fleet_mgmt_sensors.Builder newBuilder() {
    return new fleet_mgmt.fleet_mgmt_sensors.Builder();
  }

  /**
   * Creates a new fleet_mgmt_sensors RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new fleet_mgmt_sensors RecordBuilder
   */
  public static fleet_mgmt.fleet_mgmt_sensors.Builder newBuilder(fleet_mgmt.fleet_mgmt_sensors.Builder other) {
    if (other == null) {
      return new fleet_mgmt.fleet_mgmt_sensors.Builder();
    } else {
      return new fleet_mgmt.fleet_mgmt_sensors.Builder(other);
    }
  }

  /**
   * Creates a new fleet_mgmt_sensors RecordBuilder by copying an existing fleet_mgmt_sensors instance.
   * @param other The existing instance to copy.
   * @return A new fleet_mgmt_sensors RecordBuilder
   */
  public static fleet_mgmt.fleet_mgmt_sensors.Builder newBuilder(fleet_mgmt.fleet_mgmt_sensors other) {
    if (other == null) {
      return new fleet_mgmt.fleet_mgmt_sensors.Builder();
    } else {
      return new fleet_mgmt.fleet_mgmt_sensors.Builder(other);
    }
  }

  /**
   * RecordBuilder for fleet_mgmt_sensors instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<fleet_mgmt_sensors>
    implements org.apache.avro.data.RecordBuilder<fleet_mgmt_sensors> {

    private int vehicle_id;
    private int engine_temperature;
    private int average_rpm;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(fleet_mgmt.fleet_mgmt_sensors.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.vehicle_id)) {
        this.vehicle_id = data().deepCopy(fields()[0].schema(), other.vehicle_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.engine_temperature)) {
        this.engine_temperature = data().deepCopy(fields()[1].schema(), other.engine_temperature);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.average_rpm)) {
        this.average_rpm = data().deepCopy(fields()[2].schema(), other.average_rpm);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing fleet_mgmt_sensors instance
     * @param other The existing instance to copy.
     */
    private Builder(fleet_mgmt.fleet_mgmt_sensors other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.vehicle_id)) {
        this.vehicle_id = data().deepCopy(fields()[0].schema(), other.vehicle_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.engine_temperature)) {
        this.engine_temperature = data().deepCopy(fields()[1].schema(), other.engine_temperature);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.average_rpm)) {
        this.average_rpm = data().deepCopy(fields()[2].schema(), other.average_rpm);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'vehicle_id' field.
      * @return The value.
      */
    public int getVehicleId() {
      return vehicle_id;
    }


    /**
      * Sets the value of the 'vehicle_id' field.
      * @param value The value of 'vehicle_id'.
      * @return This builder.
      */
    public fleet_mgmt.fleet_mgmt_sensors.Builder setVehicleId(int value) {
      validate(fields()[0], value);
      this.vehicle_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicle_id' field has been set.
      * @return True if the 'vehicle_id' field has been set, false otherwise.
      */
    public boolean hasVehicleId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'vehicle_id' field.
      * @return This builder.
      */
    public fleet_mgmt.fleet_mgmt_sensors.Builder clearVehicleId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'engine_temperature' field.
      * @return The value.
      */
    public int getEngineTemperature() {
      return engine_temperature;
    }


    /**
      * Sets the value of the 'engine_temperature' field.
      * @param value The value of 'engine_temperature'.
      * @return This builder.
      */
    public fleet_mgmt.fleet_mgmt_sensors.Builder setEngineTemperature(int value) {
      validate(fields()[1], value);
      this.engine_temperature = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'engine_temperature' field has been set.
      * @return True if the 'engine_temperature' field has been set, false otherwise.
      */
    public boolean hasEngineTemperature() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'engine_temperature' field.
      * @return This builder.
      */
    public fleet_mgmt.fleet_mgmt_sensors.Builder clearEngineTemperature() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'average_rpm' field.
      * @return The value.
      */
    public int getAverageRpm() {
      return average_rpm;
    }


    /**
      * Sets the value of the 'average_rpm' field.
      * @param value The value of 'average_rpm'.
      * @return This builder.
      */
    public fleet_mgmt.fleet_mgmt_sensors.Builder setAverageRpm(int value) {
      validate(fields()[2], value);
      this.average_rpm = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'average_rpm' field has been set.
      * @return True if the 'average_rpm' field has been set, false otherwise.
      */
    public boolean hasAverageRpm() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'average_rpm' field.
      * @return This builder.
      */
    public fleet_mgmt.fleet_mgmt_sensors.Builder clearAverageRpm() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public fleet_mgmt_sensors build() {
      try {
        fleet_mgmt_sensors record = new fleet_mgmt_sensors();
        record.vehicle_id = fieldSetFlags()[0] ? this.vehicle_id : (java.lang.Integer) defaultValue(fields()[0]);
        record.engine_temperature = fieldSetFlags()[1] ? this.engine_temperature : (java.lang.Integer) defaultValue(fields()[1]);
        record.average_rpm = fieldSetFlags()[2] ? this.average_rpm : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<fleet_mgmt_sensors>
    WRITER$ = (org.apache.avro.io.DatumWriter<fleet_mgmt_sensors>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<fleet_mgmt_sensors>
    READER$ = (org.apache.avro.io.DatumReader<fleet_mgmt_sensors>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.vehicle_id);

    out.writeInt(this.engine_temperature);

    out.writeInt(this.average_rpm);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.vehicle_id = in.readInt();

      this.engine_temperature = in.readInt();

      this.average_rpm = in.readInt();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.vehicle_id = in.readInt();
          break;

        case 1:
          this.engine_temperature = in.readInt();
          break;

        case 2:
          this.average_rpm = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










