/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package fleet_mgmt;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class fleet_mgmt_location extends org.apache.avro.specific.SpecificRecordBase
        implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = -4640907510502576693L;

    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser()
            .parse(
                    "{\"type\":\"record\",\"name\":\"fleet_mgmt_location\",\"namespace\":\"fleet_mgmt\",\"fields\":[{\"name\":\"vehicle_id\",\"type\":\"int\"},{\"name\":\"location\",\"type\":{\"type\":\"record\",\"name\":\"location\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}],\"connect.name\":\"fleet_mgmt.location\"}},{\"name\":\"ts\",\"type\":{\"type\":\"long\",\"connect.name\":\"org.apache.kafka.connect.data.Timestamp\",\"connect.version\":1,\"logicalType\":\"timestamp-millis\"}}],\"connect.name\":\"fleet_mgmt.fleet_mgmt_location\"}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static final SpecificData MODEL$ = new SpecificData();

    static {
        MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    }

    private static final BinaryMessageEncoder<fleet_mgmt_location> ENCODER =
            new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<fleet_mgmt_location> DECODER =
            new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<fleet_mgmt_location> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<fleet_mgmt_location> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<fleet_mgmt_location> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this fleet_mgmt_location to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a fleet_mgmt_location from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a fleet_mgmt_location instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static fleet_mgmt_location fromByteBuffer(java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private int vehicle_id;
    private fleet_mgmt.location location;
    private java.time.Instant ts;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public fleet_mgmt_location() {}

    /**
     * All-args constructor.
     * @param vehicle_id The new value for vehicle_id
     * @param location The new value for location
     * @param ts The new value for ts
     */
    public fleet_mgmt_location(java.lang.Integer vehicle_id, fleet_mgmt.location location, java.time.Instant ts) {
        this.vehicle_id = vehicle_id;
        this.location = location;
        this.ts = ts.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    }

    @Override
    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return vehicle_id;
            case 1:
                return location;
            case 2:
                return ts;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    private static final org.apache.avro.Conversion<?>[] conversions = new org.apache.avro.Conversion<?>[] {
        null, null, new org.apache.avro.data.TimeConversions.TimestampMillisConversion(), null
    };

    @Override
    public org.apache.avro.Conversion<?> getConversion(int field) {
        return conversions[field];
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                vehicle_id = (java.lang.Integer) value$;
                break;
            case 1:
                location = (fleet_mgmt.location) value$;
                break;
            case 2:
                ts = (java.time.Instant) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'vehicle_id' field.
     * @return The value of the 'vehicle_id' field.
     */
    public int getVehicleId() {
        return vehicle_id;
    }

    /**
     * Sets the value of the 'vehicle_id' field.
     * @param value the value to set.
     */
    public void setVehicleId(int value) {
        this.vehicle_id = value;
    }

    /**
     * Gets the value of the 'location' field.
     * @return The value of the 'location' field.
     */
    public fleet_mgmt.location getLocation() {
        return location;
    }

    /**
     * Sets the value of the 'location' field.
     * @param value the value to set.
     */
    public void setLocation(fleet_mgmt.location value) {
        this.location = value;
    }

    /**
     * Gets the value of the 'ts' field.
     * @return The value of the 'ts' field.
     */
    public java.time.Instant getTs() {
        return ts;
    }

    /**
     * Sets the value of the 'ts' field.
     * @param value the value to set.
     */
    public void setTs(java.time.Instant value) {
        this.ts = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    }

    /**
     * Creates a new fleet_mgmt_location RecordBuilder.
     * @return A new fleet_mgmt_location RecordBuilder
     */
    public static fleet_mgmt.fleet_mgmt_location.Builder newBuilder() {
        return new fleet_mgmt.fleet_mgmt_location.Builder();
    }

    /**
     * Creates a new fleet_mgmt_location RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new fleet_mgmt_location RecordBuilder
     */
    public static fleet_mgmt.fleet_mgmt_location.Builder newBuilder(fleet_mgmt.fleet_mgmt_location.Builder other) {
        if (other == null) {
            return new fleet_mgmt.fleet_mgmt_location.Builder();
        } else {
            return new fleet_mgmt.fleet_mgmt_location.Builder(other);
        }
    }

    /**
     * Creates a new fleet_mgmt_location RecordBuilder by copying an existing fleet_mgmt_location instance.
     * @param other The existing instance to copy.
     * @return A new fleet_mgmt_location RecordBuilder
     */
    public static fleet_mgmt.fleet_mgmt_location.Builder newBuilder(fleet_mgmt.fleet_mgmt_location other) {
        if (other == null) {
            return new fleet_mgmt.fleet_mgmt_location.Builder();
        } else {
            return new fleet_mgmt.fleet_mgmt_location.Builder(other);
        }
    }

    /**
     * RecordBuilder for fleet_mgmt_location instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<fleet_mgmt_location>
            implements org.apache.avro.data.RecordBuilder<fleet_mgmt_location> {

        private int vehicle_id;
        private fleet_mgmt.location location;
        private fleet_mgmt.location.Builder locationBuilder;
        private java.time.Instant ts;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(fleet_mgmt.fleet_mgmt_location.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.vehicle_id)) {
                this.vehicle_id = data().deepCopy(fields()[0].schema(), other.vehicle_id);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.location)) {
                this.location = data().deepCopy(fields()[1].schema(), other.location);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (other.hasLocationBuilder()) {
                this.locationBuilder = fleet_mgmt.location.newBuilder(other.getLocationBuilder());
            }
            if (isValidValue(fields()[2], other.ts)) {
                this.ts = data().deepCopy(fields()[2].schema(), other.ts);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
        }

        /**
         * Creates a Builder by copying an existing fleet_mgmt_location instance
         * @param other The existing instance to copy.
         */
        private Builder(fleet_mgmt.fleet_mgmt_location other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.vehicle_id)) {
                this.vehicle_id = data().deepCopy(fields()[0].schema(), other.vehicle_id);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.location)) {
                this.location = data().deepCopy(fields()[1].schema(), other.location);
                fieldSetFlags()[1] = true;
            }
            this.locationBuilder = null;
            if (isValidValue(fields()[2], other.ts)) {
                this.ts = data().deepCopy(fields()[2].schema(), other.ts);
                fieldSetFlags()[2] = true;
            }
        }

        /**
         * Gets the value of the 'vehicle_id' field.
         * @return The value.
         */
        public int getVehicleId() {
            return vehicle_id;
        }

        /**
         * Sets the value of the 'vehicle_id' field.
         * @param value The value of 'vehicle_id'.
         * @return This builder.
         */
        public fleet_mgmt.fleet_mgmt_location.Builder setVehicleId(int value) {
            validate(fields()[0], value);
            this.vehicle_id = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'vehicle_id' field has been set.
         * @return True if the 'vehicle_id' field has been set, false otherwise.
         */
        public boolean hasVehicleId() {
            return fieldSetFlags()[0];
        }

        /**
         * Clears the value of the 'vehicle_id' field.
         * @return This builder.
         */
        public fleet_mgmt.fleet_mgmt_location.Builder clearVehicleId() {
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'location' field.
         * @return The value.
         */
        public fleet_mgmt.location getLocation() {
            return location;
        }

        /**
         * Sets the value of the 'location' field.
         * @param value The value of 'location'.
         * @return This builder.
         */
        public fleet_mgmt.fleet_mgmt_location.Builder setLocation(fleet_mgmt.location value) {
            validate(fields()[1], value);
            this.locationBuilder = null;
            this.location = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'location' field has been set.
         * @return True if the 'location' field has been set, false otherwise.
         */
        public boolean hasLocation() {
            return fieldSetFlags()[1];
        }

        /**
         * Gets the Builder instance for the 'location' field and creates one if it doesn't exist yet.
         * @return This builder.
         */
        public fleet_mgmt.location.Builder getLocationBuilder() {
            if (locationBuilder == null) {
                if (hasLocation()) {
                    setLocationBuilder(fleet_mgmt.location.newBuilder(location));
                } else {
                    setLocationBuilder(fleet_mgmt.location.newBuilder());
                }
            }
            return locationBuilder;
        }

        /**
         * Sets the Builder instance for the 'location' field
         * @param value The builder instance that must be set.
         * @return This builder.
         */
        public fleet_mgmt.fleet_mgmt_location.Builder setLocationBuilder(fleet_mgmt.location.Builder value) {
            clearLocation();
            locationBuilder = value;
            return this;
        }

        /**
         * Checks whether the 'location' field has an active Builder instance
         * @return True if the 'location' field has an active Builder instance
         */
        public boolean hasLocationBuilder() {
            return locationBuilder != null;
        }

        /**
         * Clears the value of the 'location' field.
         * @return This builder.
         */
        public fleet_mgmt.fleet_mgmt_location.Builder clearLocation() {
            location = null;
            locationBuilder = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'ts' field.
         * @return The value.
         */
        public java.time.Instant getTs() {
            return ts;
        }

        /**
         * Sets the value of the 'ts' field.
         * @param value The value of 'ts'.
         * @return This builder.
         */
        public fleet_mgmt.fleet_mgmt_location.Builder setTs(java.time.Instant value) {
            validate(fields()[2], value);
            this.ts = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'ts' field has been set.
         * @return True if the 'ts' field has been set, false otherwise.
         */
        public boolean hasTs() {
            return fieldSetFlags()[2];
        }

        /**
         * Clears the value of the 'ts' field.
         * @return This builder.
         */
        public fleet_mgmt.fleet_mgmt_location.Builder clearTs() {
            fieldSetFlags()[2] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public fleet_mgmt_location build() {
            try {
                fleet_mgmt_location record = new fleet_mgmt_location();
                record.vehicle_id =
                        fieldSetFlags()[0] ? this.vehicle_id : (java.lang.Integer) defaultValue(fields()[0]);
                if (locationBuilder != null) {
                    try {
                        record.location = this.locationBuilder.build();
                    } catch (org.apache.avro.AvroMissingFieldException e) {
                        e.addParentField(record.getSchema().getField("location"));
                        throw e;
                    }
                } else {
                    record.location =
                            fieldSetFlags()[1] ? this.location : (fleet_mgmt.location) defaultValue(fields()[1]);
                }
                record.ts = fieldSetFlags()[2] ? this.ts : (java.time.Instant) defaultValue(fields()[2]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<fleet_mgmt_location> WRITER$ =
            (org.apache.avro.io.DatumWriter<fleet_mgmt_location>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<fleet_mgmt_location> READER$ =
            (org.apache.avro.io.DatumReader<fleet_mgmt_location>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }
}
